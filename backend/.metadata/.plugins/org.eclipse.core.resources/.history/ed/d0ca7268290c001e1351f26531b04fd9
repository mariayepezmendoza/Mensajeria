/**
 * 
 */
package com.maria.api.impl.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.maria.api.exception.ResourceNotFoundException;
import com.maria.api.model.Message;
import com.maria.api.model.Terminal;
import com.maria.api.repository.IMessageRepository;
import com.maria.api.repository.ITerminalRepository;

import io.reactivex.Observable;

/**
 * @author Maria
 *
 */

@Service
@Transactional
public class MessageServiceImpl implements MessageService{

	private static final Logger Log = LoggerFactory.getLogger(MessageServiceImpl.class);

	@Autowired
	private IMessageRepository messageRepository;

	@Autowired
	private ITerminalRepository terminalRepository ;

	@Override
	public List<Message> registerMessage(List<Message> messages) {
		for(Message mensaje : messages) {
			Terminal terminal = verifyTerminal(mensaje);
			mensaje.setTerminal(terminal);

			Observable<Message> source = Observable.just(messageRepository.save(mensaje));
			source.subscribe(s -> Log.info(Constants.STR_RELATION + s.toString()));

		}
		return messages;
	}

	@Override
	public Observable<Message> updateMessage(Message message) {
		Optional<Message> messageDb = this.messageRepository.findById(message.getId());
	
		if(messageDb.isPresent()) {
			Message messageForUpdate = messageDb.get();
			setValues(message, messageForUpdate);
			
			Observable<Message> source = Observable.just(messageForUpdate);
			source.subscribe(s -> Log.info(Constants.STR_RELATION + s.toString()));
			return source;
		}else {
			throw new ResourceNotFoundException(Constants.STR_ERROR_ID + message.getId());
		}
	}

	@Override
	public List<Message> getAllMessage() {
		List<Message> list = new ArrayList<Message>(messageRepository.findAll());
		Observable<Message> source = Observable.fromIterable(list);
		source.subscribe(s -> Log.info(Constants.STR_RELATION + s.toString()));
		return list;
	}

	@Override
	public Observable<Message> getMessageById(long messageId) {
		Optional<Message> changeDb = this.messageRepository.findById(messageId);

		if(changeDb.isPresent()) {
			Observable<Message> source = Observable.just(changeDb.get());
			source.subscribe(s -> Log.info(Constants.STR_RELATION + s.toString()));
			return source;
		}else {
			throw new ResourceNotFoundException(Constants.STR_ERROR_ID + messageId);
		}
	}

	@Override
	public Observable<String> deleteMessage(long messageId) {
		Optional<Message> changeDb = this.messageRepository.findById(messageId);
		Observable<String> message = null;
		try {
			if(changeDb.isPresent()) {
				this.messageRepository.delete(changeDb.get());
				message = Observable.just(Constants.STR_DELETE_OK);
				message.subscribe(s -> Log.info(Constants.STR_DELETE_OK));
			}else {
				message = Observable.just(Constants.STR_DELETE_ERROR);
				throw new ResourceNotFoundException(Constants.STR_ERROR_ID + messageId);
			}
		} catch (Exception e) {
			message = Observable.just(Constants.STR_DELETE_ERROR);
			throw new ResourceNotFoundException(Constants.STR_ERROR_ID + messageId);
		}
		
		return message;
	}

	private Terminal verifyTerminal(Message mensaje) {
		Optional<Terminal> terminalDb = this.terminalRepository.getTerminalByCode(
				mensaje.getTerminal().getCodigo());

		Terminal terminal = new Terminal();
		if(terminalDb.isPresent()) {
			terminal.setId(terminalDb.get().getId());
			terminal.setCodigo(terminalDb.get().getCodigo());
			terminal.setDescripcion(terminalDb.get().getDescripcion());
		}else {
			throw new ResourceNotFoundException(Constants.STR_ERROR_CURRENCY +
					mensaje.getTerminal().getCodigo());
		}

		return terminal;
	}

	private void setValues(Message message, Message messageForUpdate) {
		Terminal terminal = null;
		if(message.getId() != null) {
			messageForUpdate.setId(message.getId());
		}

		if(message.getTerminal() != null &&
			!message.getTerminal().getCodigo().equals("")) {
			 terminal = verifyTerminal(message);
			 messageForUpdate.setTerminal(terminal);
		}
		
		if(message.getFechaHora() != null) {
			messageForUpdate.setFechaHora(message.getFechaHora());
		}
		
		if(message.getNumeroTarjeta() != null) {
			messageForUpdate.setNumeroTarjeta(message.getNumeroTarjeta());
		}
	}

}
